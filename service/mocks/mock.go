// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	payint "payint"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// BlockUser mocks base method.
func (m *MockAuthorization) BlockUser(user payint.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockAuthorizationMockRecorder) BlockUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockAuthorization)(nil).BlockUser), user)
}

// CreateAdmin mocks base method.
func (m *MockAuthorization) CreateAdmin(admin payint.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAuthorizationMockRecorder) CreateAdmin(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAuthorization)(nil).CreateAdmin), admin)
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user payint.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// GetUser mocks base method.
func (m *MockAuthorization) GetUser(username, password string) (payint.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username, password)
	ret0, _ := ret[0].(payint.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthorizationMockRecorder) GetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthorization)(nil).GetUser), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(signedToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", signedToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(signedToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), signedToken)
}

// UnBlockUser mocks base method.
func (m *MockAuthorization) UnBlockUser(user payint.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnBlockUser indicates an expected call of UnBlockUser.
func (mr *MockAuthorizationMockRecorder) UnBlockUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockUser", reflect.TypeOf((*MockAuthorization)(nil).UnBlockUser), user)
}

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// BlockAccount mocks base method.
func (m *MockAccount) BlockAccount(iban string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockAccount", iban)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockAccount indicates an expected call of BlockAccount.
func (mr *MockAccountMockRecorder) BlockAccount(iban interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockAccount", reflect.TypeOf((*MockAccount)(nil).BlockAccount), iban)
}

// CreateAccount mocks base method.
func (m *MockAccount) CreateAccount(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountMockRecorder) CreateAccount(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccount)(nil).CreateAccount), name)
}

// GetAccountsByBalance mocks base method.
func (m *MockAccount) GetAccountsByBalance() ([]payint.OutputAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByBalance")
	ret0, _ := ret[0].([]payint.OutputAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByBalance indicates an expected call of GetAccountsByBalance.
func (mr *MockAccountMockRecorder) GetAccountsByBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByBalance", reflect.TypeOf((*MockAccount)(nil).GetAccountsByBalance))
}

// GetAccountsByIban mocks base method.
func (m *MockAccount) GetAccountsByIban() ([]payint.OutputAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByIban")
	ret0, _ := ret[0].([]payint.OutputAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByIban indicates an expected call of GetAccountsByIban.
func (mr *MockAccountMockRecorder) GetAccountsByIban() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByIban", reflect.TypeOf((*MockAccount)(nil).GetAccountsByIban))
}

// GetAccountsById mocks base method.
func (m *MockAccount) GetAccountsById() ([]payint.OutputAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsById")
	ret0, _ := ret[0].([]payint.OutputAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsById indicates an expected call of GetAccountsById.
func (mr *MockAccountMockRecorder) GetAccountsById() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsById", reflect.TypeOf((*MockAccount)(nil).GetAccountsById))
}

// UnBlockAccount mocks base method.
func (m *MockAccount) UnBlockAccount(iban string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockAccount", iban)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnBlockAccount indicates an expected call of UnBlockAccount.
func (mr *MockAccountMockRecorder) UnBlockAccount(iban interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockAccount", reflect.TypeOf((*MockAccount)(nil).UnBlockAccount), iban)
}

// MockPayment is a mock of Payment interface.
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment.
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance.
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPayment) CreatePayment(payment payint.Payment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", payment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentMockRecorder) CreatePayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPayment)(nil).CreatePayment), payment)
}

// GetPaymentsById mocks base method.
func (m *MockPayment) GetPaymentsById() ([]payint.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsById")
	ret0, _ := ret[0].([]payint.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsById indicates an expected call of GetPaymentsById.
func (mr *MockPaymentMockRecorder) GetPaymentsById() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsById", reflect.TypeOf((*MockPayment)(nil).GetPaymentsById))
}

// GetPaymentsDate mocks base method.
func (m *MockPayment) GetPaymentsDate() ([]payint.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsDate")
	ret0, _ := ret[0].([]payint.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsDate indicates an expected call of GetPaymentsDate.
func (mr *MockPaymentMockRecorder) GetPaymentsDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsDate", reflect.TypeOf((*MockPayment)(nil).GetPaymentsDate))
}

// ReplenishAccount mocks base method.
func (m *MockPayment) ReplenishAccount(name string, deposit int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplenishAccount", name, deposit)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplenishAccount indicates an expected call of ReplenishAccount.
func (mr *MockPaymentMockRecorder) ReplenishAccount(name, deposit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplenishAccount", reflect.TypeOf((*MockPayment)(nil).ReplenishAccount), name, deposit)
}
